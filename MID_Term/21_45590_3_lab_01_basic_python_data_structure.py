# -*- coding: utf-8 -*-
"""21-45590-3 Lab 01 Basic_Python_Data_Structure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AdaAM2RVR51effbpvoWtexhT3u58umgU

# About this notebook
<p style="text-align: justify"> Here, you will learn the basic coding and data structures including numbers, strings, list, dictionaries and more. Some codes already done for demonstration. Some other codes, you will do as excercises.</p>

## Submission
<p style="text-align: justify">After completing the practice codes and exercises, download the notebook (.pynb file) and submit the notebook  to MS Teams inbox in the class period</p>
<p> 1.<b> You must submit your own code</b>. If similarity found negative marking will be given.</p>
<p> 2. Modify the file name writing ID at the beigining of the file name. </p><p><b>Example: 21-45590-3 Lab 01.ipynb</b></p>
<p> 3. Other file format (except .pynb) or link will not be accepted.</p>

# **INSTRUCTION**

# Number
"""

# basic numeric operations
34 - 22

# classic division returns a float
23/12

# floor division discards the fractional part
23 // 7

# assigin value to variable for later use
a = 1299 / 22
print(a)

# use the variable a for further operations
b = a*9
print(b)

a=2 ** 10

"""<b>Exercise 1:</b> Assign values to some variables and perform different operations. Also print the results."""

# Assign values to variables
x = 111
y = 20
name = "Tanvir"

# Perform operations
sum_result = x + y
difference_result = x - y
product_result = x * y
quotient_result = x / y
remainder_result = x % y
exponentiation_result = x ** y
floor_division_result = x // y

# Print the results
print("Sum:", sum_result)
print("Difference:", difference_result)
print("Product:", product_result)
print("Quotient:", quotient_result)
print("Remainder:", remainder_result)
print("Exponentiation:", exponentiation_result)
print("Floor Division:", floor_division_result)

"""# Import Module
<p style="text-align: justify"> Python code in one module gains access to the code in another module by the process of importing it. The import statement is the most common way of invoking the import machinery.</p>

<p style="text-align: justify">Python’s standard library is very extensive, offering a wide range of facilities. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs.</p>

<b> Example:</b> Python has a built-in module that you can use for mathematical tasks. The math module has a set of methods and constants. The detail documentation can be found [here](https://docs.python.org/3/library/math.html).
"""

# importing the math module
import math
# accessing the constant π from math
print(math.tau)
print(math.pi)

# using the method sqrt from math
math.sqrt(66)

math.factorial(5)

math.prod([2,3,5,7])

"""<b>Remember:</b> A cell always outputs the value of last variable. If you want to show other values use print. See the below cell for an example."""

print(1+2)
print(a*4)
print(a/b)

"""<b>Exercise 2:</b> Import a module of your choice (other than math) and show some operations.<br>
You can find one from all python module list [Click here](https://docs.python.org/3/py-modindex.html).
"""

# code here
import datetime

# Get the current date and time
current_datetime = datetime.datetime.now()
print(current_datetime)

# Create a date object
date_object = datetime.date(2024, 5, 17)
print(date_object)

# Create a time object
time_object = datetime.time(14, 30, 0)
print(time_object)

# Format the date and time
formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M:%S")
print(formatted_datetime)

#date time with Dhaka time Zone
import datetime
import pytz

# Get the current time in UTC
now_utc = datetime.datetime.now(datetime.timezone.utc)
print(now_utc)

# Define the desired timezone
timezone = pytz.timezone('Asia/Dhaka')
print(timezone)

# Convert to the desired timezone
now_dhaka = now_utc.astimezone(timezone)

# Print the current time with timezone
print(now_dhaka)

"""Date

# Object types
The basic object types are Numbers, Strings, Lists, Dictionaries, Tuples, Files and Other types (Sets, types, None, Booleans etc.)
"""

a=10.5

# Checking the type of an object
print(type(a))
print(type(b))

c = 123
print(type(c))

d = '123'
print(type(d))

c = 45.5
print(type(c))

a = 7
d = 99+a
print(type(d))

"""# String"""

# assign value to a variable. The value can be qouted using '' or ""
s = 'Bangladesh'
s[-1]

# index
s[5]

# negative index
s = 'asdf'
s[0]

"""When to use ' ' or " " ?

string operations with * and +
"""

'Tanvir ' * 8

name='Hi'
name * 33

name='Tanvir '

name + ' Hossain'

# slicing
name = 'Tanvir Hossain'
print(name[0:-7])
print(name[-8:])
print(name[-7:-3])
print(name[1:7])

name[-8:-2]

#dir(name)

"""Some examples of string methods"""

name = 'Tanvir Hossain tanvir'
sub = 'Ho'
name.count(sub)

help(name.count)

print(name.split()[-1])

name.islower()

mystring = 'I am right\nHe is fine\nThis it okay'
mystring.splitlines()

mystring = 'I am right\nHe is fine\nThis it okay'
mystring.split(' ')

separator = '??'
mystrings = ['Himel', 'Liton', 'Hasan', 'Fahim']
separator.join(mystrings)

#help(mystring.count)

len(name)

# check which functions you can use with variable 'name'
dir(name)

help(name.split)

"""<b>Exercise 3:</b> Demonstrate some string operations. Also, show uses of some string methods."""

# String operations
string1 = "Tanvir"
string2 = "Hossain"
# Concatenation (+)
concatenated_string = string1 + " " + string2
print(concatenated_string)

# Repetition (*)
repeated_string = string1 * 3
print(repeated_string)

# String methods

text = "My name is Tanvir hossain , from Feni Bangladesh."

# Uppercase
uppercase_text = text.upper()
print(uppercase_text)

# Lowercase
lowercase_text = text.lower()
print(lowercase_text)

# Replace
replaced_text = text.replace("Feni", "Dhaka")
print(replaced_text)

# Split
split_text = text.split(" ")
print(split_text)

# Find
index = text.find("hossain")
print(index)

"""# List
<p style="text-align: justify">Python knows a number of compound data types, used to group together other values. The most versatile is the list, which can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type.</p>
"""

squares = [1, 4, 9, 16, 25]
squares

data = [21, 'Manager', ['Manager', 89000] ,4.50, 'Dhaka']
data.insert(2,10)
print(data)

"""Like strings (and all other built-in sequence types), lists can be indexed and sliced:"""

data[-3][1]

data[-1]

data[0:3]

data[1]

data[2][0]

len(data)

data

"""Some list methods"""

data = [21, 'Manager', ['Manager', 89000] ,4.50, 'Dhaka']
data.append(200)
print(data)

data = [21, 'Manager', ['Manager', 89000] ,4.50, 'Dhaka']
data.insert(1,150)
print(data)

data = [21, 'Manager', ['Manager', 89000] ,4.50, 'Dhaka']
data.remove('Manager')
print(data)
data.remove( ['Manager', 89000])
print(data)

data = [21, 'Manager', ['Manager', 89000] ,4.50, 'Dhaka']
data.pop()
print(data)
data.reverse()
print(data)

dir(data)

#help(data.insert)

"""Lists also support operations like concatenation"""

squares + data

"""<b> Exercise 4:</b> Implement stack using list
<p><b>Hints:</b> The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (“last-in, first-out”). To add an item to the top of the stack, use append(). To retrieve an item from the top of the stack, use pop() without an explicit index</p>
"""

# Implementing a Stack using List
stack = []

# Function to push an element onto the stack
def push(element):
    stack.append(element)
    print(f"{element} pushed to stack")

# Function to pop an element from the stack
def pop():
    if len(stack) == 0:
        print("Stack is empty, cannot pop")
    else:
        element = stack.pop()
        print(f"{element} popped from stack")

# Function to display the current stack
def display_stack():
    print(f"Current Stack: {stack}")

# Example usage:
push(10)
push(20)
push(30)
display_stack()

pop()
display_stack()

"""<b> Exercise 5:</b> Implement queue using list
<p><b>Hints:</b> It is also possible to use a list as a queue, where the first element added is the first element retrieved (“first-in, first-out”)</p>
"""

# code here
class Queue:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def enqueue(self, item):
        self.items.append(item)  # Add to the rear

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)  # Remove from the front
        else:
            return None  # Or raise an exception

    def size(self):
        return len(self.items)

# Create a queue
queue = Queue()

# Enqueue elements
queue.enqueue(11)
queue.enqueue(22)
queue.enqueue(33)

# Dequeue and print elements
print(queue.dequeue())
print(queue.dequeue())
print(queue.dequeue())
print(queue.dequeue())

"""# Dictionary
<p style="text-align: justify">Dictionaries are sometimes found in other languages as “associative memories” or “associative arrays”. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys.</p>

<p style="text-align: justify">It is best to think of a dictionary as a set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output.</p>
"""

tel = {'jack': 4098, 'sape': 4139}

list(tel.keys())[1]

tel['guido'] = 4127
tel

person = {'Age':21,'Name':['niaz','rahman'], 'Salary':56000, 'Rating':4.50}

person['Rating']

len(person)

person.keys()

#person.has_key('Name')
'Name' in person.keys()

'niaz' in person['Name']

#dir(person)

"""<b> Exercise 6:</b> Define a dictionary to store the details of persons. Also, print some data from the dictionary.
 <p><b>Hint:</b> You may require nesting dictionary, lists, string inside the dictionary.</p>
"""

# Code here
# Define a dictionary to store details of persons
persons = {
    "person1": {
        "name": "Tanvir",
        "age": 23,
        "gender": "Male",
        "address": {
            "street": "Kuril,khilkhate",
            "city": "Dhaka",
            "postal_code": "1230"
        },
        "hobbies": ["Coding", "Traveling", "Swimming"]
    },
    "person2": {
        "name": "Bithi",
        "age": 21,
        "gender": "Female",
        "address": {
            "street": "Academy,Feni sadar",
            "city": "Feni",
            "postal_code": "3901"
        },
        "hobbies": ["Cooking", "Hiking", "Gardening"]
    }
}

# Print some data from the dictionary
# Example: print name and city of person1
print(f"Name: {persons['person1']['name']}")
print(f"City: {persons['person1']['address']['city']}")
print(f"Name: {persons['person2']['name']}")
print(f"PostalCode: {persons['person2']['address']['postal_code']}")
# Example: print hobbies of person2
print(f"Hobbies of {persons['person2']['name']}: {', '.join(persons['person2']['hobbies'])}")

"""# Tuples and Sets
<b>Exercise 7: (Optional)</b> Use the content from [here](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences) to follow some examples on tuple and set.

Creating and Using Tuples:
"""

# code from here
# Creating a tuple
my_tuple = (1, 2, 3, "apple", "banana")

# Accessing elements
print(my_tuple[0])
print(my_tuple[3])

# Slicing
print(my_tuple[1:4])

# Tuple packing and unpacking
a, b, c, d, e = my_tuple
print(a, b, c, d, e)  # Output: 1 2 3 apple banana

"""Set"""

# Creating a set
my_set = {1, 2, 3, 3, 4, 5}  # Duplicates are automatically removed
print(my_set)

# Adding elements
my_set.add(6)
print(my_set)

# Removing elements
my_set.remove(3)
print(my_set)

# Set operations
set1 = {1, 2, 3}
set2 = {3, 4, 5}

# Union
print(set1 | set2)

# Intersection
print(set1 & set2)

# Difference
print(set1 - set2)